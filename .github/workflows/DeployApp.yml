on:
  push:
    branches:
      - master
env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: nest-api
  ECS_SERVICE: nestjs-task-service-nxx3q4lu
  ECS_CLUSTER: pleasant-gorilla-d4izrb
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: "nestjs-container"
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


# name: Build and Deploy BackendApp to ECS

# on:
#   push:
#     branches:
#       - master

# env:
#   # Setting an environment variable with the value of a configuration variable
#   ECR_IMAGE: ${{ vars.ECR_IMAGE }}
#   AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # - name: Set up QEMU for arm64
#       #   run: |
#       #     docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#       #   if: runner.os == 'Linux'

#       # - name: Set up Docker for arm64
#       #   uses: docker/setup-qemu-action@v2
#       #   with:
#       #     platforms: linux/arm64

#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-southeast-1

#       - name: Login to Amazon ECR
#         run: |
#           aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

#       - name: Build and push Docker image
#         run: |
#           docker buildx create --use
#           docker buildx inspect --bootstrap
#           docker buildx build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_IMAGE:latest --push .

#       - name: Update ECS service
#         run: |
#           aws ecs update-service --cluster pleasant-gorilla-d4izrb --service nestjs-task-service-1h8ko1zz --force-new-deployment

#       - name: Deploy to ECS
#         uses: imehedi/actions-awscli-v2@latest
#         with:
#           args: ecs update-service --cluster pleasant-gorilla-d4izrb --service nestjs-task-service-nxx3q4lu --force-new-deployment
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: 'ap-southeast-1'
