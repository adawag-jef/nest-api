name: Build and Deploy BackendApp to ECS

on:
  push:
    branches:
      - master

env:
  # Setting an environment variable with the value of a configuration variable
  ECR_IMAGE: ${{ vars.ECR_IMAGE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Build and push Docker image
        run: |
            docker build -t nest-api .
            docker tag nest-api:latest 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com/nest-api:latest
            docker push 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com/nest-api:latest

 
    uses: appleboy/ssh-action@master
    with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USER }}
      key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      envs: |
        TAG=${TAG}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=ap-southeast-1
      script: |
        sudo su
        echo "AWS CLI version: $(aws --version)"
        echo "Docker version: $(docker --version)"

        echo "Stop the current running container if exist..."
        docker stop nest-api || true

        echo "Remove the previous container..."
        docker rm nest-api || true

        echo "AWS credentials set...."
        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        export AWS_REGION=${AWS_REGION}

        echo "Logging in to ECR...."
        aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com
        echo "Logged in successful..."

        echo "Pulling  image from ECR..."
        docker pull 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com/nest-api:latest
        echo "Docker pull completed..."

        echo "Running the container..."
        docker run -d \
          --name nest-api \
          -p 80:3000 686255981564.dkr.ecr.ap-southeast-1.amazonaws.com/nest-api:latest

      # - name: Fill in new image ID in task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #   task-definition: task-definition.json 
      #   container-name: nestjs-container 
      #   image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_IMAGE:latest

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1 
      #   with:
      #   task-definition: ${{ steps.task-def.outputs.task-definition }}
      #   service: nestjs-task-service
      #   cluster: nest-cluster

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service --cluster nest-cluster --service nestjs-task-service --force-new-deployment

      # - name: Deploy to ECS
      #   uses: imehedi/actions-awscli-v2@latest
      #   with:
      #     args: ecs update-service --cluster pleasant-gorilla-d4izrb --service nestjs-task-service-nxx3q4lu --force-new-deployment
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: 'ap-southeast-1'
  - name: SSH into EC2 instance and deploy